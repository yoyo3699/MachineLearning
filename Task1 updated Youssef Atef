import numpy as np, pandas as pd, seaborn as sns, matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.datasets import make_moons
from sklearn.cluster import KMeans


Kmeans = pd.read_csv("Customer data.csv")
[row1,col1]=np.shape(Kmeans)
New_Kmeans=Kmeans.iloc[:,1:col1]
Cust_Data=pd.DataFrame(New_Kmeans).to_numpy()
count=0
k=5

Centroids_random=Cust_Data[np.random.choice(row1,k,replace=False)]
def GUC_Distance ( Centroids_random, Data_points, Distance_Type ):
    Ecludian_Distance=np.zeros([row1,k])
    Average_Customers=np.zeros([row1,1])
    Average_Centers=np.zeros([k,1])
    updated_CustData=np.zeros([row1,1])
    updated_centroids=np.zeros([k,1])
    diff_centroids=np.zeros([k,col1-1])#(x-xdash)
    diff_CustomerData=np.zeros([row1,col1-1])
    numerator=np.zeros([row1,k])
    denominator=np.zeros([row1,k])
    if Distance_Type=='Eucledian distance':
        for i in range(k):    
            Ecludian_Distance[:,i] = ((Cust_Data-Centroids_random[i])**2).sum(axis=1)
            Cluster_Distance=Ecludian_Distance
    else:
        Average_Customers=np.average(Cust_Data,axis=1)
        Average_Centers=np.average(Centroids_random,axis=1)
        for b in range(row1):
           diff_CustomerData[b]=Cust_Data[b]-Average_Customers[b] 
       
        for a in range(k):
           diff_centroids[a]=Centroids_random[a]-Average_Centers[a]
        for m in range(row1):
           updated_CustData[m]=((Cust_Data[m]-Average_Customers[m])**2).sum()
        for n in range(k):
           updated_centroids[n]=((Centroids_random[n]-Average_Centers[n])**2).sum()
        for p in range(k):
           for o in range(row1): 
               numerator[o,p]=(diff_CustomerData[o]* diff_centroids[p]).sum()
               denominator[o,p]=np.sqrt(updated_CustData[o]*updated_centroids[p])
        Cluster_Distance=1-(numerator/denominator)
    return Cluster_Distance
def GUC_Kmean ( Cust_Data,k,Distance_Type ):
    Centroids_random=Cust_Data[np.random.choice(row1,k,replace=False)]
    Users_Cluster=np.zeros(k)
    Sum_per_Clusters=np.zeros([k,col1-1])
    New_Centers=np.zeros([k,col1-1])
    Dis_Fn=0
    Dis_Fn_temp=-1
    for z in range(100):
        Centroids_random=Cust_Data[np.random.choice(row1,k,replace=False)]
        while True:
            Distance=GUC_Distance ( Centroids_random, Cust_Data,'Eucledian distance')
            Min_index=np.argmin(Distance,axis=1)
            Min_Dis=np.min(Distance,axis=1)
            Final_Cluster_Distance=Min_Dis
            for count in range(k):
                for x in range(row1):
                    if Min_index[x]==count:
                        Dis_Fn=Dis_Fn+((((Cust_Data[x]-Centroids_random[count])**2)).sum())
                        Users_Cluster[count]=Users_Cluster[count]+1
                        Sum_per_Clusters[count]=Sum_per_Clusters[count]+Cust_Data[x]
                New_Centers[count]=Sum_per_Clusters[count]/Users_Cluster[count]
                Dis_Fn=Dis_Fn/row1
            if Dis_Fn==Dis_Fn_temp:
                break
            else:
                Dis_Fn_temp=Dis_Fn
            if z==0:
                min_dis_fn=Dis_Fn
            if Dis_Fn<min_dis_fn:
                min_dis_fn=Dis_Fn
                Centroids_random=New_Centers
            return Min_index
def GUC_Get_Users(Centroids_random,Cust_Data):
    Distance=GUC_Distance ( Centroids_random, Cust_Data,'Eucledian distance')
    Min_index=np.argmin(Distance,axis=1)
    counter=0
    Users=np.zeros((row1,col1-1))
    while True:
        for p in range(row1):
            if(Min_index[p]==counter):
                Users[p]=Cust_Data[p]
        counter=counter+1
        display(Users,counter-1)
        Users=np.zeros((row1,col1-1))
        if(counter==k):
            break
    return Users   

def display(X,km=[],num_clusters=Centroids_random):
    color = 'brgcmyk' 
    alpha = 0.5 
    s = 20
    if num_clusters == 0:
        plt.scatter(X[:,0],X[:,1],c = color[0],alpha = alpha,s = s)
    else:
        for i in range(num_clusters):
            plt.scatter(X[km==i,:0],X[km==i,:1],c = color[i],alpha = alpha,s=s)
            plt.scatter(Centroids_random[i,0],Centroids_random[i,1],c = color[i], marker = 'x', s = 100)
            
def display(X,km=[],num_clusters=0):
    color = 'brgcmyk' 
    alpha = 0.5 
    s = 20
    if num_clusters == 0:
        plt.scatter(X[:,0],X[:,1],c = color[0],alpha = alpha,s = s)
    else:
        for i in range(num_clusters):
            plt.scatter(X[km==i],X[km==i],c = color[i],alpha = alpha,s=s)
            plt.scatter(Centroids_random[i][0],Centroids_random[i][1],c = color[i], marker = 'x', s = 100)
            
distance=GUC_Kmean( Cust_Data,k,'Eucledian distance')

wcss_list=[]
for i in range(1, 11):  
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state= 42)  
    kmeans.fit(Cust_Data)  
    wcss_list.append(kmeans.inertia_)  
plt.plot(range(1, 11), wcss_list)  
plt.title('The Elobw Method Graph')  
plt.xlabel('Number of clusters(k)')  
plt.ylabel('wcss_list')  
plt.show()
   
   
m=GUC_Kmean(Cust_Data, k, 'Eucledian distance')
df = pd.DataFrame(dict(x=Cust_Data[:,2], y=Cust_Data[:,4], label=m.astype(int)))
colors = {0:'blue', 1:'orange', 2:'green',3:'red',4:'olive',5:'yellow',6:'pink'}
fig, ax = plt.subplots(figsize=(8, 8))
grouped = df.groupby('label')
for key, group in grouped:
    group.plot(ax=ax, kind='scatter', x='x', y='y', label=key, color=colors[key])
ax.scatter(Centroids_random[:, 2],Centroids_random[:, 4], marker='*', s=150, c='#ff2222')
plt.xlabel('X_1')
plt.ylabel('X_2')
plt.show()
